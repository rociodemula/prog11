/*
 * Tarea PROG11: Mejora de la aplicación gráfica incorporando persistencia 
 * en base de datos relacional MySql
 * Tarea PROG10: Reconstrucción de la aplicación incorporando la capa gráfica.
 */
package basicos;

import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 * Clase principal para la gestión gráfica de la aplicación de gestión de
 * trabajadores.
 *
 * Inicia pantallas de la aplicación, y controla la sincronización de toda la
 * parte gráfica. Dispones de varios métodos de apoyo para la realización de
 * tareas auxiliares con respecto a gráficos. Se apoya en la clase Auxiliar para
 * la obtención de datos.
 *
 * @since version 2.0 13/04/2014 (PROG10)
 * @author RociodeMula <rociodemula@gmail.com>
 * @version 2.1 04/05/2014 (PROG11)
 */
public class GMainUI extends javax.swing.JFrame {

    //definimos como estáticas de clase las variables necesarias 
    // para la gestiónde la base de datos.
    static String url = "jdbc:mysql://localhost/empresa?"
            + "user=root&password=";
    static Connection conexion;
    static Statement sentencia;

    /**
     * Constructor de la clase GMainUI
     *
     * @since version 2.0 13/04/2014
     */
    public GMainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nifABuscar = new javax.swing.JTextField();
        botonBuscar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        opcionExportarXml = new javax.swing.JMenuItem();
        opcionImportarXml = new javax.swing.JMenuItem();
        opcionSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        opcionCrearTrabajadorFijo = new javax.swing.JMenuItem();
        opcionCrearTrabajadorEventual = new javax.swing.JMenuItem();
        opcionModificarTrabajador = new javax.swing.JMenuItem();
        opcionListarTrabajadores = new javax.swing.JMenuItem();
        opcionSetSueldoFijo = new javax.swing.JMenuItem();
        opcionSetPrecioHoraExtra = new javax.swing.JMenuItem();
        opcionSetCuotaObrera = new javax.swing.JMenuItem();
        opcionSetPrecioHoraTrabajada = new javax.swing.JMenuItem();
        opcionEnviarCorreo = new javax.swing.JMenu();
        boletinEmail = new javax.swing.JMenuItem();
        opcionGenerarNominas = new javax.swing.JMenuItem();
        opcionRecuperarNominas = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar"));
        jPanel1.setToolTipText("");
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("NiIF/NIE:");

        nifABuscar.setColumns(3);
        nifABuscar.setText("nif a buscar");
        nifABuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nifABuscarActionPerformed(evt);
            }
        });

        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(nifABuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addComponent(botonBuscar)
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nifABuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscar))
                .addGap(16, 16, 16))
        );

        jMenu1.setMnemonic('A');
        jMenu1.setText("Archivo");

        opcionExportarXml.setMnemonic('E');
        opcionExportarXml.setText("Exportar XML");
        opcionExportarXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionExportarXmlActionPerformed(evt);
            }
        });
        jMenu1.add(opcionExportarXml);

        opcionImportarXml.setMnemonic('I');
        opcionImportarXml.setText("Importar XML");
        opcionImportarXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionImportarXmlActionPerformed(evt);
            }
        });
        jMenu1.add(opcionImportarXml);

        opcionSalir.setMnemonic('S');
        opcionSalir.setText("Salir");
        opcionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSalirActionPerformed(evt);
            }
        });
        jMenu1.add(opcionSalir);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('T');
        jMenu2.setText("Trabajadores");

        opcionCrearTrabajadorFijo.setMnemonic('F');
        opcionCrearTrabajadorFijo.setText("Crear Trabajador Fijo");
        opcionCrearTrabajadorFijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCrearTrabajadorFijoActionPerformed(evt);
            }
        });
        jMenu2.add(opcionCrearTrabajadorFijo);

        opcionCrearTrabajadorEventual.setMnemonic('E');
        opcionCrearTrabajadorEventual.setText("Crear Trabajador Eventual");
        opcionCrearTrabajadorEventual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCrearTrabajadorEventualActionPerformed(evt);
            }
        });
        jMenu2.add(opcionCrearTrabajadorEventual);

        opcionModificarTrabajador.setMnemonic('M');
        opcionModificarTrabajador.setText("Modificar Trabajador");
        opcionModificarTrabajador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionModificarTrabajadorActionPerformed(evt);
            }
        });
        jMenu2.add(opcionModificarTrabajador);

        opcionListarTrabajadores.setMnemonic('L');
        opcionListarTrabajadores.setText("Listar Trabajadores");
        opcionListarTrabajadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionListarTrabajadoresActionPerformed(evt);
            }
        });
        jMenu2.add(opcionListarTrabajadores);

        opcionSetSueldoFijo.setMnemonic('S');
        opcionSetSueldoFijo.setText("Establecer Sueldo Fijo Mínimo (Para trabajadores fijos)");
        opcionSetSueldoFijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSetSueldoFijoActionPerformed(evt);
            }
        });
        jMenu2.add(opcionSetSueldoFijo);

        opcionSetPrecioHoraExtra.setMnemonic('x');
        opcionSetPrecioHoraExtra.setText("Establecer Precio Hora Extra (Para trabajadores fijos)");
        opcionSetPrecioHoraExtra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSetPrecioHoraExtraActionPerformed(evt);
            }
        });
        jMenu2.add(opcionSetPrecioHoraExtra);

        opcionSetCuotaObrera.setMnemonic('C');
        opcionSetCuotaObrera.setText("Establecer Cuota obrera (Para trabajadores eventuales)");
        opcionSetCuotaObrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSetCuotaObreraActionPerformed(evt);
            }
        });
        jMenu2.add(opcionSetCuotaObrera);

        opcionSetPrecioHoraTrabajada.setMnemonic('H');
        opcionSetPrecioHoraTrabajada.setText("Establecer Precio de Hora Trabajada (Para trabajadores eventuales)");
        opcionSetPrecioHoraTrabajada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSetPrecioHoraTrabajadaActionPerformed(evt);
            }
        });
        jMenu2.add(opcionSetPrecioHoraTrabajada);

        jMenuBar1.add(jMenu2);

        opcionEnviarCorreo.setMnemonic('U');
        opcionEnviarCorreo.setText("Utilidades");

        boletinEmail.setMnemonic('E');
        boletinEmail.setText("Enviar correo electrónico a los trabajadores");
        boletinEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boletinEmailActionPerformed(evt);
            }
        });
        opcionEnviarCorreo.add(boletinEmail);

        opcionGenerarNominas.setMnemonic('o');
        opcionGenerarNominas.setText("Generar fichero de Nóminas");
        opcionGenerarNominas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGenerarNominasActionPerformed(evt);
            }
        });
        opcionEnviarCorreo.add(opcionGenerarNominas);

        opcionRecuperarNominas.setMnemonic('R');
        opcionRecuperarNominas.setText("Recuperar fichero de Nóminas");
        opcionRecuperarNominas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionRecuperarNominasActionPerformed(evt);
            }
        });
        opcionEnviarCorreo.add(opcionRecuperarNominas);

        jMenuBar1.add(opcionEnviarCorreo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(82, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nifABuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nifABuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nifABuscarActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        // si se pulsa Buscar, guardamos en una variable el texto obtenido en la caja nif
        String texto = nifABuscar.getText();
        try {
            if (!texto.isEmpty()) { //si el nif no está vacío, realizamos el proceso 
                String nif = texto.trim();
                Trabajador trabajador = GMainUI.buscarTrabajador(nif, false);
                if (trabajador != null) {
                    GMainUI.mostrarTrabajador(trabajador, this); //si lo encontramos, lo mostramos
                } else {//si no lo encuentra, mostramos mensaje de error
                    JOptionPane.showMessageDialog(null, "El NIF/NIE tecleado no existe "
                            + "en la base de datos.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else { //si el nif está vacío, mostramos el mensaje de error
                JOptionPane.showMessageDialog(null, "No ha tecleado ningún NIF.", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void opcionImportarXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionImportarXmlActionPerformed
        try { //si se pulsa importar xml, usamos el método ya definido en Auxiliar.
            Auxiliar.importarXml();
            JOptionPane.showMessageDialog(null, "Fichero importado.",
                    "Atención",
                    JOptionPane.INFORMATION_MESSAGE); //y lanzamos mensaje de éxito
        } catch (Exception ex) { //si ha ocurrido algo, lanzamos el mensaje de error.
            JOptionPane.showMessageDialog(null, "No se pudo realizar la importación: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_opcionImportarXmlActionPerformed

    private void opcionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSalirActionPerformed
        //si se pulsa la opción Salir, abandonamos el sistema.
        System.exit(0);
    }//GEN-LAST:event_opcionSalirActionPerformed

    private void opcionCrearTrabajadorFijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCrearTrabajadorFijoActionPerformed
        // si se pulsa Crear Trabajador Fijo, lo creamos con la ayuda del método helper
        GMainUI.crearTrabajador(true, this); //marcamos true para saber que queremos crear un fijo.

    }//GEN-LAST:event_opcionCrearTrabajadorFijoActionPerformed

    private void opcionSetPrecioHoraExtraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSetPrecioHoraExtraActionPerformed
        //si se pulsa Establecer Precio Hora Extra, creamos la ventana que lo gestiona.
        HoraExtraUI ventanaHoraExtra = new HoraExtraUI(this, true);
        ventanaHoraExtra.pack(); //la ajustamos
        ventanaHoraExtra.setTitle("Actualizar precio hora extra"); //le ponemos el título
        ventanaHoraExtra.setLocationRelativeTo(null);
        ventanaHoraExtra.setVisible(true); //le trasladamos el control

        ventanaHoraExtra.dispose(); //cuando nos devuelva el control, la cerramos.
    }//GEN-LAST:event_opcionSetPrecioHoraExtraActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //en caso de cerrar la ventana principal de la aplicacion, salimos.        
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void opcionCrearTrabajadorEventualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCrearTrabajadorEventualActionPerformed
        // si se pulsa Crear Trabajador Eventual, lo creamos con la ayuda del método helper
        GMainUI.crearTrabajador(false, this); //como parámetro pasamos false para saber que no es un fijo
    }//GEN-LAST:event_opcionCrearTrabajadorEventualActionPerformed

    private void opcionExportarXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionExportarXmlActionPerformed
        try {
            // si se pulsa Exportar xml, lo hacemos con el método de Auxiliar.
            Auxiliar.exportarXml();
            JOptionPane.showMessageDialog(null, "Fichero exportado.",
                    "Atención",
                    JOptionPane.INFORMATION_MESSAGE); //si sale bien, mensaje de éxito
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar la exportación." + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE); //si sale mal, mensaje de error.
        }
    }//GEN-LAST:event_opcionExportarXmlActionPerformed

    private void opcionGenerarNominasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGenerarNominasActionPerformed
        //si se pulsa esta opción, mostramos el mensaje que nos devuelva el métoto
        //que realiza esta acción en Auxiliar. Será un mensaje de éxito, o de error.
        JOptionPane.showMessageDialog(null, Auxiliar.generarFicheroNominas(),
                "Atención",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_opcionGenerarNominasActionPerformed

    private void opcionModificarTrabajadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionModificarTrabajadorActionPerformed
        // Si se pulsa esta opción, creamos la pantalla de modificacion de trabajadores
        ModificarTrabajadorUI ventanaNifModificar = new ModificarTrabajadorUI(this, true);
        ventanaNifModificar.pack(); //la ajustamos
        ventanaNifModificar.setTitle("Modificar Trabajador"); //fijamos título
        ventanaNifModificar.setLocationRelativeTo(null);
        ventanaNifModificar.setVisible(true); //transferimos el control

        //cuando tengamos el control de nuevo, verificamos la posición a la que 
        //apunta el índice, y si apunta a una posición del array, mostramos al trabajador.
        Trabajador trabajador = ventanaNifModificar.getTrabajador();
        if (trabajador != null) {
            GMainUI.mostrarTrabajador(trabajador, this);
        }
        ventanaNifModificar.dispose(); //despues, dstruimos la ventana.
    }//GEN-LAST:event_opcionModificarTrabajadorActionPerformed

    private void opcionSetCuotaObreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSetCuotaObreraActionPerformed
        //si pulsamos esta opción, creamos una ventana para la gestión de 
        //cambio de cuota obrera
        CuotaObreraUI ventanaCuota = new CuotaObreraUI(this, true);
        ventanaCuota.pack(); //ajustamos
        ventanaCuota.setTitle("Actualizar cuota obrera"); //ponemos título
        ventanaCuota.setLocationRelativeTo(null);
        ventanaCuota.setVisible(true); //transferimos el control

        ventanaCuota.dispose(); //cuando los recuperemos, destruimos la ventana

    }//GEN-LAST:event_opcionSetCuotaObreraActionPerformed

    private void opcionSetSueldoFijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSetSueldoFijoActionPerformed
        //si se pulsa cambiar sueldo fijo, creamos la ventana que lo gestiona
        SueldoFijoUI ventanaSueldoFijo = new SueldoFijoUI(this, true);
        ventanaSueldoFijo.pack(); //la ajustamos
        ventanaSueldoFijo.setTitle("Actualizar sueldo fijo mínimo"); //le ponemos título
        ventanaSueldoFijo.setLocationRelativeTo(null);
        ventanaSueldoFijo.setVisible(true); //le transferimos en control

        ventanaSueldoFijo.dispose(); //cuando lo recuperemos, la destruimos.
    }//GEN-LAST:event_opcionSetSueldoFijoActionPerformed

    private void opcionSetPrecioHoraTrabajadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSetPrecioHoraTrabajadaActionPerformed
        //si se pulsa cambiar hora trabajada, creamos la ventana que gestiona este cambio
        HoraTrabajadaUI ventanaHora = new HoraTrabajadaUI(this, true);
        ventanaHora.pack(); //la ajustamos
        ventanaHora.setTitle("Actualizar precio hora trabajada"); //la titulamos
        ventanaHora.setLocationRelativeTo(null);
        ventanaHora.setVisible(true); //le transferimos el control

        ventanaHora.dispose(); //cuando lo recuperemos, la destruimos
    }//GEN-LAST:event_opcionSetPrecioHoraTrabajadaActionPerformed

    private void opcionListarTrabajadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionListarTrabajadoresActionPerformed
        //si se pulsa listar tranajadores, creamos la ventana que controla este caso
        ListarTrabajadoresUI ventanaLista = new ListarTrabajadoresUI(this, true);
        ventanaLista.pack(); //la ajustamos
        ventanaLista.setTitle("Listado de Trabajadores"); //la titulamos
        ventanaLista.setLocationRelativeTo(null);
        ventanaLista.setVisible(true); //le transferimos el control

        ventanaLista.dispose(); //cuando lo recuperemos, la destruimos.
    }//GEN-LAST:event_opcionListarTrabajadoresActionPerformed

    private void boletinEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boletinEmailActionPerformed
        //si se pulsa enviar un mail de noticias, creamos la ventana que lo gestiona
        BoletinNoticiasUI ventanaCorreo = new BoletinNoticiasUI(this, true);
        ventanaCorreo.pack(); //la ajustamos 
        ventanaCorreo.setTitle("Envío de boletín de correo electrónico a trabajadores."); //la titulamos
        ventanaCorreo.setLocationRelativeTo(null);
        ventanaCorreo.setVisible(true); // le pasamos el control

        ventanaCorreo.dispose(); //cuando lo recuperemos, la destruimos.
    }//GEN-LAST:event_boletinEmailActionPerformed

    private void opcionRecuperarNominasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionRecuperarNominasActionPerformed
        String nominas;
        try {
            nominas = Auxiliar.leerFicheroNominas();
            MostrarNominasUI ventana = new MostrarNominasUI(this, true, nominas);
            ventana.pack();
            ventana.setTitle("Recuperar fichero nóminas");
            ventana.setLocationRelativeTo(null);
            ventana.setVisible(true);

            ventana.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_opcionRecuperarNominasActionPerformed

    /**
     * Método que gestiona la parte gráfica de la búsqueda de un trabajador con
     * el NIF/NIE pasado como parémtro, en la base de datos mysql de
     * trabajadores. Este método admite su uso tanto si existe una conexión
     * abierta con mysql, como si no. Con el parámetro boolean marcamos si la
     * conexión previa existe, o no. En caso de que no encuentre el nif, o no se
     * consiga leer la base de datos, se lanza una excepción.
     *
     * @since version 2.0 13/04/2014 (PROG10)
     * @param nif String con el NIF/NIE a buscar
     * @param conectado boolean true si la conexión previa existe, false, si no.
     * @return devuelve el trabajador que coincide con el nif buscado. Será null
     * en caso de que no haya sido encontrado.
     * @throws java.lang.Exception
     */
    public static Trabajador buscarTrabajador(String nif, boolean conectado) throws Exception {
        Trabajador trabajador = null; //declaramos e inicializamos el trabajador de apoyo a "no encontado"
        CuentaBancaria ccc; // variable de apoyo para alojar la cuenta bancaria
        try {
            if (!conectado) { //si no está abierta laconexión con mysql, la abrimos
                GMainUI.conexion = DriverManager.getConnection(GMainUI.url);
                GMainUI.sentencia = GMainUI.conexion.createStatement();
            }
            try {
                if (Validar.validaNifONie(nif)) { //si el nif es válido lo buscamos en la base de datos
                    //generamos el resultado con el nif encontrado, mediante una SELECT
                    ResultSet resultado = GMainUI.sentencia.executeQuery("SELECT nombre, nifonie, "
                            + "DATE_FORMAT(fechanacimiento,'%d-%m-%Y') fechanac, altura, ccc, "
                            + "ocupacion, telefono, numerodehijos, DATE_FORMAT(fechacontrato,'%d-%m-%Y') fechacon,"
                            + "email, numerocolaboraciones, numerohorastrabajadas, codigo FROM trabajadoreventual WHERE nifonie='" + nif + "'");
                    if (resultado.next()) { //si se ha encontrado el trabajador, guardamos el nuevo trabajador eventual en la variable de apoyo
                        ccc = new CuentaBancaria(resultado.getString("ccc"),
                                resultado.getString("nifonie"), resultado.getString("nombre"));
                        trabajador = new TrabajadorEventual(resultado.getString("nombre"),
                                resultado.getString("nifonie"), resultado.getString("fechanac"),
                                String.valueOf(resultado.getDouble("altura")), resultado.getString("ocupacion"),
                                resultado.getString("telefono"), String.valueOf(resultado.getInt("numerodehijos")),
                                ccc, resultado.getString("fechacon"), resultado.getString("email"),
                                String.valueOf(resultado.getInt("numerocolaboraciones")), String.valueOf(resultado.getInt("numerohorastrabajadas")),
                                resultado.getInt("codigo"));
                    } else { //si no lo hemos encontrado en la tabla de eventuales, buscamos en la de fijos, con otra SELECT
                        resultado = GMainUI.sentencia.executeQuery("SELECT nombre, nifonie, "
                                + "DATE_FORMAT(fechanacimiento,'%d-%m-%Y') fechanac, altura, ccc, "
                                + "ocupacion, telefono, numerodehijos, DATE_FORMAT(fechacontrato,'%d-%m-%Y') fechacon,"
                                + "email, sueldofijo, numerohorasextras, codigo FROM trabajadorfijo WHERE nifonie='" + nif + "'");
                        if (resultado.next()) { //Si lo hemos encontraso, creamos el nuevo fijo en la variable de apoyo a retornar
                            ccc = new CuentaBancaria(resultado.getString("ccc"),
                                    resultado.getString("nifonie"), resultado.getString("nombre"));
                            trabajador = new TrabajadorFijo(resultado.getString("nombre"),
                                    resultado.getString("nifonie"), resultado.getString("fechanac"),
                                    String.valueOf(resultado.getDouble("altura")), resultado.getString("ocupacion"),
                                    resultado.getString("telefono"), String.valueOf(resultado.getInt("numerodehijos")),
                                    ccc, resultado.getString("fechacon"), resultado.getString("email"),
                                    String.valueOf(resultado.getDouble("sueldofijo")), String.valueOf(resultado.getInt("numerohorasextras")),
                                    resultado.getInt("codigo"));
                        }
                    }
                } else { //si el nif no es valido, lanzamos la excepcion
                    throw new Exception("El nif tecleado no es válido."
                            + " Comprúebelo y tecléelo de nuevo.");
                }
            } catch (SQLException e) { //si se produce esta excepción es que algo ha pasado con la sentencia
                throw new Exception("Error de gestión con la base de datos: "
                        + e.getMessage());
            }
            if (!conectado) { //si estamos gestionando la apertura desde este método, es hora de cerrarla
                GMainUI.conexion.close();
            }
        } catch (SQLException e) { //si salta esta excepción aquí, es que ha habido un problema con la conexión.
            JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos: "
                    + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return trabajador; //devolvemos el trabajador, que será null de no haberse encontrado
    }

    /**
     * Método que gestiona la creación de trabajadores tanto eventuales como
     * fijos. Incluye la gestión de la parte gráfica, y la de base de datos
     * mysql.
     *
     * @since version 2.0 13/04/2014
     * @param fijo boolean que será true si el trabajador a crear debe ser fijo,
     * o false, si debe ser eventual
     * @param ventana GMainUI con el parent frame que se usará para la creación
     * de la ventana nueva.
     */
    public static void crearTrabajador(boolean fijo, GMainUI ventana) {
        if (fijo) { //si es trabajador fijo lo que vamos a crear, se genera la ventana
            //que gestiona la creación de fijos
            CrearTrabajadorFijoUI ventanaTrabajadorFijo = new CrearTrabajadorFijoUI(ventana, true);
            ventanaTrabajadorFijo.pack(); //se ajusta
            ventanaTrabajadorFijo.setTitle("Crear Trabajador Fijo"); //la titulamos
            ventanaTrabajadorFijo.setLocationRelativeTo(null);
            ventanaTrabajadorFijo.setVisible(true); //transferimos elcontrol

            //cuando recuperamos el control, si se ha instanciado un trabajador,
            //lo incorporamos al archivo en Auxiliar.
            Trabajador trabajadorNuevo = ventanaTrabajadorFijo.getTrabajador();
            if (trabajadorNuevo != null) { //si se ha creado un nuevo trabajador, tenemos que insertarlo en mysql
                try { //iniciamos la conexión con mysql
                    GMainUI.conexion = DriverManager.getConnection(GMainUI.url);
                    GMainUI.sentencia = GMainUI.conexion.createStatement();
                    //ejecutamos el INSERT con todos los datos del trabajador nuevo.
                    GMainUI.sentencia.executeUpdate("INSERT INTO trabajadorfijo(nombre, "
                            + "nifonie, fechanacimiento, altura, ocupacion, "
                            + "telefono, numerodehijos, ccc, fechacontrato, "
                            + "email, sueldofijo, numerohorasextras, codigo) VALUES ('"
                            + trabajadorNuevo.getNombre() + "', '"
                            + trabajadorNuevo.getNifONie() + "', STR_TO_DATE('"
                            + trabajadorNuevo.getFechaNacimiento() + "','%d-%m-%Y'), "
                            + Double.parseDouble(trabajadorNuevo.getAltura()) + ", '"
                            + trabajadorNuevo.getOcupacion() + "', '"
                            + trabajadorNuevo.getTelefono() + "', "
                            + Integer.parseInt(trabajadorNuevo.getNumeroDeHijos()) + ", '"
                            + trabajadorNuevo.getCcc().getCodigoCuentaCliente() + "', STR_TO_DATE( '"
                            + trabajadorNuevo.getFechaContrato() + "','%d-%m-%Y'), '"
                            + trabajadorNuevo.getEmail() + "', "
                            + Double.parseDouble(((TrabajadorFijo) trabajadorNuevo).getSueldoFijo()) + ", "
                            + Integer.parseInt(((TrabajadorFijo) trabajadorNuevo).getNumeroHorasExtra()) + ", "
                            + trabajadorNuevo.getCodigoTrabajador() + ")");
                    //guardamos los datos alterados por la creación en la tabla configuración
                    guardarConfiguracion(true);
                    GMainUI.conexion.close(); //cerramos la conexión
                } catch (SQLException e) { //si salta esta excepción, es que ha habido algún problema con la gestión de mysql
                    JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos: "
                            + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            ventanaTrabajadorFijo.dispose(); //destruimos la ventana
        } else { //si es trabajador eventual lo que vamos a crear, se genera la ventana
            //que gestiona la creación de eventuales
            CrearTrabajadorEventualUI ventanaTrabajadorEventual = new CrearTrabajadorEventualUI(ventana, true);
            ventanaTrabajadorEventual.pack(); //la ajustamos
            ventanaTrabajadorEventual.setTitle("Crear Trabajador Eventual"); //la titulamos
            ventanaTrabajadorEventual.setLocationRelativeTo(null);
            ventanaTrabajadorEventual.setVisible(true); //le damos el control

            //cuando tengamos el control de nuevo, si se ha instanciado algún 
            //trabajador, lo incorporamos al archivo.
            Trabajador trabajadorNuevo = ventanaTrabajadorEventual.getTrabajador();
            if (trabajadorNuevo != null) { //si se ha creado un nuevo trabajador, lo insertamos en mysql
                try { //conectamos con la base de datos
                    GMainUI.conexion = DriverManager.getConnection(GMainUI.url);
                    GMainUI.sentencia = GMainUI.conexion.createStatement();
                    //ejecutamos el INSERT con los datos del trabajador nuevo
                    GMainUI.sentencia.executeUpdate("INSERT INTO trabajadoreventual(nombre, "
                            + "nifonie, fechanacimiento, altura, ocupacion, "
                            + "telefono, numerodehijos, ccc, fechacontrato, "
                            + "email, numerocolaboraciones, numerohorastrabajadas, codigo) VALUES ('" + trabajadorNuevo.getNombre()
                            + "', '" + trabajadorNuevo.getNifONie() + "', STR_TO_DATE('" + trabajadorNuevo.getFechaNacimiento()
                            + "','%d-%m-%Y'), " + Double.parseDouble(trabajadorNuevo.getAltura()) + ", '" + trabajadorNuevo.getOcupacion()
                            + "', '" + trabajadorNuevo.getTelefono() + "', " + Integer.parseInt(trabajadorNuevo.getNumeroDeHijos())
                            + ", '" + trabajadorNuevo.getCcc().getCodigoCuentaCliente() + "', STR_TO_DATE('" + trabajadorNuevo.getFechaContrato()
                            + "','%d-%m-%Y'), '" + trabajadorNuevo.getEmail() + "', " + Integer.parseInt(((TrabajadorEventual) trabajadorNuevo).getNumeroColaboraciones())
                            + ", " + Integer.parseInt(((TrabajadorEventual) trabajadorNuevo).getNumeroDeHoras()) + ", " + trabajadorNuevo.getCodigoTrabajador()
                            + ")");
                    //guardamos los datos alterados por la creación en la tabla configuración
                    guardarConfiguracion(true);
                    GMainUI.conexion.close(); //cerramos la conexión
                } catch (SQLException e) { //si salta esta excepcion, es que algo ha ido mal en mysql
                    JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos: "
                            + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            ventanaTrabajadorEventual.dispose(); //destruimos la ventana
        }
    }

    /**
     * Método que gestiona la visualización de datos de un trabajador, tanto
     * fijo como eventual. Incluye la parte gráfica, y la gestión de mysql
     *
     * @since version 2.0 13/04/2014
     * @param trabajador Trabajador con la posición en el array del trabajador a
     * mostrar
     * @param ventana GMainUI con el parent frame que se usará para la creación
     * de la nueva ventana.
     */
    public static void mostrarTrabajador(Trabajador trabajador, GMainUI ventana) {
        //si el índice apunta a un trabajador fijo, gestionamos todo con la ventana
        //que muestra los atributos apropiados para este tipo de trabajador.
        if (trabajador instanceof TrabajadorFijo) {
            MostrarTrabajadorFijoUI ventanaTrabajadorFijo = new MostrarTrabajadorFijoUI(ventana, true, (TrabajadorFijo) trabajador);
            ventanaTrabajadorFijo.pack();
            ventanaTrabajadorFijo.setModal(true);
            ventanaTrabajadorFijo.setTitle("Modificar Trabajador Fijo");
            ventanaTrabajadorFijo.setLocationRelativeTo(null);
            ventanaTrabajadorFijo.setVisible(true); //después de crear y lanzar la ventana, le damos el control

            //si se ha instanciado un trabajador, sustituimos los datos recogidos en el archivo.
            Trabajador trabajadorNuevo = ventanaTrabajadorFijo.getTrabajador();
            if (trabajadorNuevo != null) { //si hemos pulsado Actualizar, el trabajador no será null
                //en caso de que se haya modificaco el nif, hay que comprobar que no existe en la base de datos.
                try {
                    if (trabajador.getNifONie().equalsIgnoreCase(trabajadorNuevo.getNifONie())
                            || buscarTrabajador(trabajadorNuevo.getNifONie(), false) == null) {
                        try { //abrimos la conexión
                            GMainUI.conexion = DriverManager.getConnection(GMainUI.url);
                            GMainUI.sentencia = GMainUI.conexion.createStatement();
                            //ejecutamos el UPDATE con los nuevos datos del trabajdort
                            GMainUI.sentencia.executeUpdate("UPDATE trabajadorfijo SET nombre='" + trabajadorNuevo.getNombre()
                                    + "', nifonie='" + trabajadorNuevo.getNifONie() + "', fechanacimiento=STR_TO_DATE('" + trabajadorNuevo.getFechaNacimiento()
                                    + "','%d-%m-%Y'), altura=" + Double.parseDouble(trabajadorNuevo.getAltura()) + ", ocupacion='" + trabajadorNuevo.getOcupacion()
                                    + "', telefono='" + trabajadorNuevo.getTelefono() + "', numerodehijos=" + Integer.parseInt(trabajadorNuevo.getNumeroDeHijos())
                                    + ", ccc='" + trabajadorNuevo.getCcc().getCodigoCuentaCliente() + "', fechacontrato=STR_TO_DATE('" + trabajadorNuevo.getFechaContrato()
                                    + "','%d-%m-%Y'), email='" + trabajadorNuevo.getEmail() + "', sueldofijo=" + Double.parseDouble(((TrabajadorFijo) trabajadorNuevo).getSueldoFijo())
                                    + ", numerohorasextras=" + Integer.parseInt(((TrabajadorFijo) trabajadorNuevo).getNumeroHorasExtra())
                                    + " WHERE nifonie='" + trabajador.getNifONie() + "'"); //usamos el nif original en la tabla mysql, por si lo hemos cambiado enla pantalla de modificación
                            GMainUI.conexion.close(); //cerramos la conexión
                        } catch (SQLException e) { //si ha habido excepción, es que ha habido problemas con la gestión de mysql
                            JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos: "
                                    + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else { //si se ha modificado el nif, y ya existe en las tablas de ma base de datos, mostramos el error
                        JOptionPane.showMessageDialog(null, "El nuevo NIF/NIE ya existe "
                                + "en la base de datos. Imposible duplicarlo.", "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else { //si el trabajador es null, es posible que sea porque hemos pulsado Borrar
                if (ventanaTrabajadorFijo.getConfirmacion()) { //si esto da true, será que hemos pulsado borrar, y hemos confirmaso
                    GMainUI.borrarTrabajador(trabajador, ventana); //con lo que borraremos el trabajador
                }
            }
            ventanaTrabajadorFijo.dispose(); //destruimos la ventana
        } else {
            //si el trabajador era eventual, hacemos la misma operación pero con
            //la ventana especializada en gestionar datos de eventuales.
            MostrarTrabajadorEventualUI ventanaTrabajadorEventual = new MostrarTrabajadorEventualUI(ventana, true, (TrabajadorEventual) trabajador);
            ventanaTrabajadorEventual.pack();
            ventanaTrabajadorEventual.setModal(true);
            ventanaTrabajadorEventual.setTitle("Modificar Trabajador Eventual");
            ventanaTrabajadorEventual.setLocationRelativeTo(null);
            ventanaTrabajadorEventual.setVisible(true); //pasamos el control a la ventana creada
            Trabajador trabajadorNuevo = ventanaTrabajadorEventual.getTrabajador();
            //si se realiza la instancia, acrtualizamos los datos en el array
            if (trabajadorNuevo != null) { //si hemos pulsado Actualizar, el trabajador no será null
                //en caso de que se haya modificaco el nif, hay que comprobar que no existe en la base de datos.
                try {
                    if (trabajador.getNifONie().equalsIgnoreCase(trabajadorNuevo.getNifONie())
                            || buscarTrabajador(trabajadorNuevo.getNifONie(), false) == null) {
                        try { //abrimos la conexión
                            GMainUI.conexion = DriverManager.getConnection(GMainUI.url);
                            GMainUI.sentencia = GMainUI.conexion.createStatement();
                            //ejecutamos el UPDATE con los datos del trabajador modificado
                            GMainUI.sentencia.executeUpdate("UPDATE trabajadoreventual SET nombre='" + trabajadorNuevo.getNombre()
                                    + "', nifonie='" + trabajadorNuevo.getNifONie() + "', fechanacimiento=STR_TO_DATE('" + trabajadorNuevo.getFechaNacimiento()
                                    + "','%d-%m-%Y'), altura=" + Double.parseDouble(trabajadorNuevo.getAltura()) + ", ocupacion='" + trabajadorNuevo.getOcupacion()
                                    + "', telefono='" + trabajadorNuevo.getTelefono() + "', numerodehijos=" + Integer.parseInt(trabajadorNuevo.getNumeroDeHijos())
                                    + ", ccc='" + trabajadorNuevo.getCcc().getCodigoCuentaCliente() + "', fechacontrato=STR_TO_DATE('" + trabajadorNuevo.getFechaContrato()
                                    + "','%d-%m-%Y'), email='" + trabajadorNuevo.getEmail() + "', numerocolaboraciones=" + Integer.parseInt(((TrabajadorEventual) trabajadorNuevo).getNumeroColaboraciones())
                                    + ", numerohorastrabajadas=" + Integer.parseInt(((TrabajadorEventual) trabajadorNuevo).getNumeroDeHoras())
                                    + " WHERE nifonie='" + trabajador.getNifONie() + "'"); //usamos el nif original de la tabla de mysql, por si se ha modificado el nif
                            GMainUI.conexion.close(); //cerramos la conexión
                        } catch (SQLException e) { //si salta esta excepción, es que algo ha ido mal en mysql
                            JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos: "
                                    + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else { //si el nif ya existe en la base de datos, lanzamos el error
                        JOptionPane.showMessageDialog(null, "El nuevo NIF/NIE ya existe "
                                + "en la base de datos. Imposible duplicarlo.", "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }else { //si el trabajador es null, es posible que sea porque hemos pulsado Borrar
                if (ventanaTrabajadorEventual.getConfirmacion()) { //si esto da true, será que hemos pulsado borrar, y hemos confirmaso
                    GMainUI.borrarTrabajador(trabajador, ventana); //con lo que borraremos el trabajador
                }
            }
            ventanaTrabajadorEventual.dispose(); //destruimos la ventana
        }
    }

    /**
     * Método que gestiona el borrado de trabajadores, fijos y eventuales.
     * Incluye la parte gráfica, y la gestión en mysql de los datos.
     *
     * @since version 2.0 13/04/2014
     * @param trabajador Trabajador a borrar.
     * @param ventana GMainUI con el parent frame a que se debe vincular la
     * nueva ventana
     */
    public static void borrarTrabajador(Trabajador trabajador, GMainUI ventana) {
        //si el trabajador es fijo, lanzamos la ventana y
        //gestionamos todo con la clase de ventana espoecializada para trabajadores fijos
        if (trabajador instanceof TrabajadorFijo) {
            try { //abrimos la conexión
                GMainUI.conexion = DriverManager.getConnection(GMainUI.url);
                GMainUI.sentencia = GMainUI.conexion.createStatement();
                //ejecutamos el DELETE para ese trabajador
                GMainUI.sentencia.executeUpdate("DELETE FROM trabajadorfijo WHERE nifonie='" + trabajador.getNifONie() + "'");
                JOptionPane.showMessageDialog(null, "Trabajador borrado", "Información", JOptionPane.INFORMATION_MESSAGE);
                //altermos los contadores de trabajadores
                --Trabajador.totalTrabajadoresEnLaEmpresa;
                --TrabajadorFijo.totalFijosEnLaEmpresa;
                //guardamos los contadores actualizados en mysql
                GMainUI.guardarConfiguracion(true);
                GMainUI.conexion.close(); //cerramos la conexión
            } catch (SQLException e) { //si ha saltado esta excepción, es que algo ha ido mal en mysql
                JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos: "
                        + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else { //si el tranajador no es fijo, hacemos el proceso en la tabla de eventuales
            try { //abrimos la conexión
                GMainUI.conexion = DriverManager.getConnection(GMainUI.url);
                GMainUI.sentencia = GMainUI.conexion.createStatement();
                //ejecutamos el DELETE para ese trabajador
                GMainUI.sentencia.executeUpdate("DELETE FROM trabajadoreventual WHERE nifonie='" + trabajador.getNifONie() + "'");
                JOptionPane.showMessageDialog(null, "Trabajador borrado", "Información", JOptionPane.INFORMATION_MESSAGE);
                //actualizamos los contadores de trabajadores
                --Trabajador.totalTrabajadoresEnLaEmpresa;
                --TrabajadorEventual.totalEventualesEnLaEmpresa;
                //grabamos los contadores nuevos en la tabla de configuración
                GMainUI.guardarConfiguracion(true);
                GMainUI.conexion.close(); //cerramos la conexión
            } catch (SQLException e) { //si salta esta excepción, es que algo ha ido mal en mysql
                JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos: "
                        + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Metodo que se encarga de grabar los datos del Auxiliar.archivo y las
     * variables de clase a la tabla de configuración de base de datos de mysql.
     * Permite su ejecución tanto con la conexión con mysql abierta, como
     * cerrada. Para diferenciar un acceso de otro, marcamos true como parámetro
     * si estamoc conectados ya , o false si no lo estamos todavía.
     *
     * @param conectado boolean que marca si estamos conectados en el momento de
     * la llamada al método, o no.
     * @since version 2.0 13/04/2014
     */
    public static void guardarConfiguracion(boolean conectado) {
        try {
            if (!conectado) { //si no estamos conectados, conectamos con mysql
                GMainUI.conexion = DriverManager.getConnection(GMainUI.url);
                GMainUI.sentencia = GMainUI.conexion.createStatement();
            } //ejecutamos primero un DELETE para dejar la tabla de configuración a 0
            GMainUI.sentencia.executeUpdate("DELETE FROM configuracion");
            //ejecutamos el INSERT con la nueva configuración, que extraemos de memoria.
            GMainUI.sentencia.executeUpdate("INSERT INTO configuracion(preciohoraextra, "
                    + "preciohoratrabajada, totaltrabajadores, codigoultimotrabajador, "
                    + "totalfijos, totaleventuales, cuotaobrera, sueldofijominimo) "
                    + "VALUES (" + Double.parseDouble(TrabajadorFijo.getPrecioHoraExtra())
                    + ", " + Double.parseDouble(TrabajadorEventual.getPrecioHora()) + ", " + Trabajador.getTotalTrabajadoresEnLaEmpresa()
                    + ", " + Trabajador.getTotalAltasTrabajador() + ", " + TrabajadorFijo.getTotalFijos()
                    + ", " + TrabajadorEventual.getTotalEventuales() + ", " + Double.parseDouble(TrabajadorEventual.getCuotaObrera())
                    + ", " + Double.parseDouble(TrabajadorFijo.getSueldoFijoMinimo())
                    + ")");
            if (!conectado) { //si hemos gestionado la conexión desde en interior de este método
                //cerramos el archivo
                GMainUI.conexion.close();
            }
        } catch (SQLException e) { //si salta esta excepción, es que algo ha ido mal con mysql
            JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos: "
                    + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Método que pone en marcha el sistema de gestión grafica de la aplicación.
     * Se encarga de crear y visualizar la ventana principal, y de volcar a
     * memoria los datos contenidos en la base de datos mysql, incluida la carga
     * del Driver.
     *
     * @since version 2.0 13/04/2014
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            /**
             * Método autoejecutable que pone en marcha la aplicación. Contiene
             * el algoritmo de arranque del programa. Después el control se
             * llevará desde las diferentes ventanas que se activen.
             *
             * @since version 2.0 13/04/2014
             */
            @Override
            public void run() {
                System.err.close(); //cerramos la salida de errores por pantalla
                System.out.close(); //cerramos la salida de mensajes por pantalla, para evitar mensajes de métodos antiguos.
                //creamos la ventana principal de la aplicación, con el menú.
                GMainUI ventana = new GMainUI();
                ventana.pack(); //la ajustamos
                ventana.setTitle("Gestión de Trabajadores"); //la titulamos
                ventana.setLocationRelativeTo(null);
                ventana.nifABuscar.selectAll(); //iluminamos el texto que invita a introducir un nif.
                try { //cargamos el Driver de mysql
                    Class.forName("com.mysql.jdbc.Driver");
                } catch (ClassNotFoundException ex) { //es posible que salte esta excepción, si no lo encuentra.
                    JOptionPane.showMessageDialog(null, "Error de carga de driver mysql: "
                            + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                //volcamos el contenido de la base de datos a memoria, sobre un ArrayList.
                Auxiliar.leerFichero();

                ventana.setVisible(true); //le transferimos el control.

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem boletinEmail;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField nifABuscar;
    private javax.swing.JMenuItem opcionCrearTrabajadorEventual;
    private javax.swing.JMenuItem opcionCrearTrabajadorFijo;
    private javax.swing.JMenu opcionEnviarCorreo;
    private javax.swing.JMenuItem opcionExportarXml;
    private javax.swing.JMenuItem opcionGenerarNominas;
    private javax.swing.JMenuItem opcionImportarXml;
    private javax.swing.JMenuItem opcionListarTrabajadores;
    private javax.swing.JMenuItem opcionModificarTrabajador;
    private javax.swing.JMenuItem opcionRecuperarNominas;
    private javax.swing.JMenuItem opcionSalir;
    private javax.swing.JMenuItem opcionSetCuotaObrera;
    private javax.swing.JMenuItem opcionSetPrecioHoraExtra;
    private javax.swing.JMenuItem opcionSetPrecioHoraTrabajada;
    private javax.swing.JMenuItem opcionSetSueldoFijo;
    // End of variables declaration//GEN-END:variables
}
